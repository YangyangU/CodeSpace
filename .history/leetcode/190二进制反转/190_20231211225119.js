//十进制反转
// res = res * 10 + n % 10;
// n /= 10;


//二进制反转
// res = res * 2 + n % 2;
// n /= 2;
function reverseBits(n) {
    let ret = 0;

    // 循环遍历每个比特位（32 位对应于一个 32 位整数）
    for (let i = 0; i < 32; i++) {
        ret <<= 1;        // 将结果（ret）左移 1 位，为下一个比特位腾出空间
        ret += (n & 1);   // 将输入整数的最后一位加到结果中，通过按位与运算提取最后一位
        n >>= 1;          // 将输入整数右移 1 位，为下一次迭代准备下一个比特位
    }

    return ret >>> 0;     // 使用无符号右移确保结果被视为无符号 32 位整数，有效地将任何负值转换为它们的无符号形式
}